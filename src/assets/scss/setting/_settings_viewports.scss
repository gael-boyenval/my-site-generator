// -----------------------------------------------------
// Description :
// set viewports and medias queries properties and mixins
// -----------------------------------------------------
// Dependencies :
// -----------------------------------------------------

$viewports: (
    'phone-s': 0px,
    'phone-m': 360px,
    'phone-l': 480px,
    'tablet-s': 680px
);

/*------------------------------------*\
            Médias queries
\*------------------------------------*/

// media query from a target and higher
@mixin from-screen($device) {
    @media screen and (min-width: map-get($viewports, $device)) {
        @content;
    }
}

// media query from 0 to a target
@mixin to-screen($device) {
    @media screen and (max-width: map-get($viewports, $device) - 1px) {
        @content;
    }
}

// media query from a device to another
@mixin from-to-screen($device-from, $device-to) {
    @media screen
        and (min-width: map-get($viewports, $device-from))
        and (max-width: map-get($viewports, $device-to) - 1px) {
        @content;
    }
}

// media query at a spécific target
@mixin at-screen($device) {
    $from-size: map-get($viewports, $device);
    $values-arr: map-values($viewports);
    $to-index: index($values-arr, $from-size) + 1;

    @if $to-index < length($values-arr) {
        // if biggers devices exists
        $to-size: nth($values-arr, $to-index);
        @media screen
            and (min-width: $from-size)
            and (max-width: $to-size - 1px) {
            @content;
        }
    } @else {
        // if it's the larger device in the list
        @media screen and (min-width: $from-size) {
            @content;
        }
    }
}

/*------------------------------------*\
    APPLY MEDIA BASED CLASS FILTER
\*------------------------------------*/
// create media filtered based classes
// ex: .ol-grid__cell--1of2@from-phone-s
// params : ('from-screen': 'phone-s', 'at-screen': 'tablet-s')...
@mixin apply-to-screen($rules...) {
    @each $rule in $rules {
        $type: nth($rule, 1);
        $screen: nth($rule, 2);
        $screenValue: map-get($viewports, $screen);

        @if $screen == 'all' {
            @content;
        } @else {

            @if ($screenValue != null) {

                @if $type == 'from-screen' {
                    @include from-screen($screen) {
                        &\@from-#{$screen} {
                            @content;
                        }
                    }
                } @else if $type == 'at-screen' {
                    @include at-screen($screen) {
                        &\@at-#{$screen} {
                            @content;
                        }
                    }
                } @else if $type == 'to-screen' {
                    @include to-screen($screen) {
                        &\@to-#{$screen} {
                            @content;
                        }
                    }
                } @else {
                    @error 'apply-at-screen with #{$type} is not suported';
                }
            } @else {
                @error 'Screen #{$screen} has no value';
            }
        }
    }
}

/*------------------------------------*\
        ORDERING QUERIES OUTPUT
\*------------------------------------*/
// PostCSS will regroup medias queries
// in the first parsed order
// => we declare empty media queries in the right
// order we want them to be implemented

// low priority | mobile first
@each $screen, $size in $viewports {
    @include from-screen($screen) {
        /* from screen */
    }
}

// medium priority | mobile first
@each $screen, $size in $viewports {
    @include to-screen($screen) {
        /* from screen */
    }
}

// medium priority | mobile first
@each $screen, $size in $viewports {
    @each $screen2, $size2 in $viewports {
        @include from-to-screen($screen, $screen2) {
            /*  from-to-screen*/
        }
    }
}

// high priority | mobile first
@each $screen, $size in $viewports {
    @include at-screen($screen) {
        /* at screen */
    }
}
